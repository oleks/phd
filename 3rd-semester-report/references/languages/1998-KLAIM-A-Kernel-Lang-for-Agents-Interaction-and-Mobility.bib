@ARTICLE{1998-KLAIM,
  author={R. {De Nicola} and G. L. {Ferrari} and R. {Pugliese}},
  journal={IEEE Transactions on Software Engineering}, 
  title={KLAIM: a kernel language for agents interaction and mobility}, 
  year={1998},
  volume={24},
  number={5},
  pages={315-330},
  abstract={We investigate the issue of designing a kernel programming language for mobile computing and describe KLAIM, a language that supports a programming paradigm where processes, like data, can be moved from one computing environment to another. The language consists of a core Linda with multiple tuple spaces and of a set of operators for building processes. KLAIM naturally supports programming with explicit localities. Localities are first-class data (they can be manipulated like any other data), but the language provides coordination mechanisms to control the interaction protocols among located processes. The formal operational semantics is useful for discussing the design of the language and provides guidelines for implementations. KLAIM is equipped with a type system that statically checks access right violations of mobile agents. Types are used to describe the intentions (read, write, execute, etc.) of processes in relation to the various localities. The type system is used to determine the operations that processes want to perform at each locality, and to check whether they comply with the declared intentions and whether they have the necessary rights to perform the intended operations at the specific localities. Via a series of examples, we show that many mobile code programming paradigms can be naturally implemented in our kernel language. We also present a prototype implementation of KLAIM in Java.},
  keywords={parallel languages;parallel programming;type theory;object-oriented languages;process algebra;software portability;software agents;KLAIM;kernel programming language;agent interaction;agent mobility;mobile computing;Linda;multiple tuple spaces;operators;explicit localities;first-class data;coordination mechanisms;interaction protocols;formal operational semantics;type system;access right violations;mobile code programming;Java;process algebra;Kernel;Computer languages;Mobile computing;Buildings;Access protocols;Guidelines;Permission;Mobile agents;Prototypes;Java},
  doi={10.1109/32.685256},
  ISSN={1939-3520},
  month={05},}
